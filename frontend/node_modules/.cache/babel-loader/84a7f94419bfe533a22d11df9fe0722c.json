{"ast":null,"code":"// Axios is a very popular JavaScript library you can use to perform HTTP requests, that works in both Browser and Node. js platforms.\nvar axios = require(\"axios\"); //node url\n\n\nvar ServerURL = \"http://localhost:3003\"; //mking 1st service , GET- when u want to read all data use get method , URL- url is action name ,Async- by help of async view nd services both work together for using async we use await , await means coming\n\nconst getData = async url => {\n  try {\n    var response = await fetch(`${ServerURL}/${url}`); //from node only json will go\n\n    var result = await response.json();\n    return result;\n  } catch (e) {\n    console.log(\"Error\", e);\n    return null;\n  }\n}; //making 2nd service ,post -when you wnt to give response with parameter\n//used when queriescontain parameters\n\n\nconst postDataAndImage = async (url, formData, confi) => {\n  try {\n    const response = await axios.post(`${ServerURL}/${url}`, formData, {\n      headers: {\n        \"content-type\": \"multipart/formData\"\n      }\n    });\n    const result = await response.data.result;\n    return result;\n  } catch (e) {\n    console.log(\"error- \", e);\n    return null;\n  }\n};\n\nconst postDataAndImageWithId = async (url, formData) => {\n  try {\n    const response = await axios.post(`${ServerURL}/${url}`, formData, {\n      headers: {\n        \"content-type\": \"multipart/formData\"\n      }\n    });\n    const result = await response.data;\n    return result;\n  } catch (e) {\n    console.log(\"error- \", e);\n    return null;\n  }\n};\n\nconst postData = async (url, body) => {\n  try {\n    const response = await fetch(`${ServerURL}/${url}`, {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\"\n      },\n      body: JSON.stringify(body)\n    });\n    const result = await response.json();\n    return result;\n  } catch (e) {\n    return null;\n  }\n}; //then we will export it\n\n\nexport { getData, postDataAndImage, ServerURL, postData, postDataAndImageWithId };","map":{"version":3,"names":["axios","require","ServerURL","getData","url","response","fetch","result","json","e","console","log","postDataAndImage","formData","confi","post","headers","data","postDataAndImageWithId","postData","body","method","mode","JSON","stringify"],"sources":["/Users/manpreetkaur/Documents/DX Factor Work Work/Project/frontend/src/FetchNodeServices.js"],"sourcesContent":["// Axios is a very popular JavaScript library you can use to perform HTTP requests, that works in both Browser and Node. js platforms.\nvar axios=require (\"axios\")\n\n//node url\nvar ServerURL = \"http://localhost:3003\"\n\n//mking 1st service , GET- when u want to read all data use get method , URL- url is action name ,Async- by help of async view nd services both work together for using async we use await , await means coming\nconst getData = async (url) => {\n    try{\n    var response = await fetch(`${ServerURL}/${url}`)\n    //from node only json will go\n    var result = await response.json()\n    return result;\n    }\n    catch(e){\n        console.log(\"Error\",e)\n        return null;\n    }\n}\n//making 2nd service ,post -when you wnt to give response with parameter\n//used when queriescontain parameters\nconst postDataAndImage = async (url,formData,confi)=>{\n    try{\n        const response = await axios.post(`${ServerURL}/${url}`,formData, {headers:{\"content-type\":\"multipart/formData\"}});\n      const result = await response.data.result;\n        return result;\n    }catch(e){\n\n        console.log(\"error- \",e)\n\n    \n        return null;\n    }\n}\nconst postDataAndImageWithId = async (url,formData)=>{\n  try{\n      const response = await axios.post(`${ServerURL}/${url}`,formData, {headers:{\"content-type\":\"multipart/formData\"}});\n    const result = await response.data;\n      return result;\n  }catch(e){\n\n      console.log(\"error- \",e)\n\n  \n      return null;\n  }\n}\n\nconst postData = async (url, body) => {\n    try {\n      const response = await fetch(`${ServerURL}/${url}`, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: { \"Content-Type\": \"application/json;charset=utf-8\" },\n        body: JSON.stringify(body),\n      });\n      const result = await response.json();\n      return result;\n    } catch (e) {\n      return null;\n    }\n  \n  }\n//then we will export it\nexport{getData,postDataAndImage,ServerURL,postData,postDataAndImageWithId}"],"mappings":"AAAA;AACA,IAAIA,KAAK,GAACC,OAAO,CAAE,OAAF,CAAjB,C,CAEA;;;AACA,IAAIC,SAAS,GAAG,uBAAhB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,MAAOC,GAAP,IAAe;EAC3B,IAAG;IACH,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,SAAU,IAAGE,GAAI,EAArB,CAA1B,CADG,CAEH;;IACA,IAAIG,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;IACA,OAAOD,MAAP;EACC,CALD,CAMA,OAAME,CAAN,EAAQ;IACJC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBF,CAApB;IACA,OAAO,IAAP;EACH;AACJ,CAXD,C,CAYA;AACA;;;AACA,MAAMG,gBAAgB,GAAG,OAAOR,GAAP,EAAWS,QAAX,EAAoBC,KAApB,KAA4B;EACjD,IAAG;IACC,MAAMT,QAAQ,GAAG,MAAML,KAAK,CAACe,IAAN,CAAY,GAAEb,SAAU,IAAGE,GAAI,EAA/B,EAAiCS,QAAjC,EAA2C;MAACG,OAAO,EAAC;QAAC,gBAAe;MAAhB;IAAT,CAA3C,CAAvB;IACF,MAAMT,MAAM,GAAG,MAAMF,QAAQ,CAACY,IAAT,CAAcV,MAAnC;IACE,OAAOA,MAAP;EACH,CAJD,CAIC,OAAME,CAAN,EAAQ;IAELC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBF,CAAtB;IAGA,OAAO,IAAP;EACH;AACJ,CAZD;;AAaA,MAAMS,sBAAsB,GAAG,OAAOd,GAAP,EAAWS,QAAX,KAAsB;EACnD,IAAG;IACC,MAAMR,QAAQ,GAAG,MAAML,KAAK,CAACe,IAAN,CAAY,GAAEb,SAAU,IAAGE,GAAI,EAA/B,EAAiCS,QAAjC,EAA2C;MAACG,OAAO,EAAC;QAAC,gBAAe;MAAhB;IAAT,CAA3C,CAAvB;IACF,MAAMT,MAAM,GAAG,MAAMF,QAAQ,CAACY,IAA9B;IACE,OAAOV,MAAP;EACH,CAJD,CAIC,OAAME,CAAN,EAAQ;IAELC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBF,CAAtB;IAGA,OAAO,IAAP;EACH;AACF,CAZD;;AAcA,MAAMU,QAAQ,GAAG,OAAOf,GAAP,EAAYgB,IAAZ,KAAqB;EAClC,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,SAAU,IAAGE,GAAI,EAArB,EAAwB;MAClDiB,MAAM,EAAE,MAD0C;MAElDC,IAAI,EAAE,MAF4C;MAGlDN,OAAO,EAAE;QAAE,gBAAgB;MAAlB,CAHyC;MAIlDI,IAAI,EAAEG,IAAI,CAACC,SAAL,CAAeJ,IAAf;IAJ4C,CAAxB,CAA5B;IAMA,MAAMb,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;IACA,OAAOD,MAAP;EACD,CATD,CASE,OAAOE,CAAP,EAAU;IACV,OAAO,IAAP;EACD;AAEF,CAdH,C,CAeA;;;AACA,SAAON,OAAP,EAAeS,gBAAf,EAAgCV,SAAhC,EAA0CiB,QAA1C,EAAmDD,sBAAnD"},"metadata":{},"sourceType":"module"}